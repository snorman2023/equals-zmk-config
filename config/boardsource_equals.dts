/*
 * Copyright (c) 2023 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;

#include <rpi_pico/rp2040.dtsi>
#include <dt-bindings/zmk/matrix_transform.h>

/ {
	model = "equals";
	compatible = "boardsource,equals";

	chosen {
		zephyr,sram = &sram0;
		zephyr,flash = &flash0;
		zephyr,console = &cdc_acm_uart;
		zephyr,shell-uart = &cdc_acm_uart;
		zephyr,code-partition = &code_partition;
		zmk,kscan = &kscan;
		zmk,matrix_transform = &ortho48_transform;
	};

	xtal_clk: xtal-clk {
		compatible = "fixed-clock";
		clock-frequency = <12000000>;
		#clock-cells = <0>;
	};


	ortho48_transform: ortho48_transform {
		compatible = "zmk,matrix-transform";
		rows = <4>;
		columns = <12>;

		map = <
	RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11) 
	RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11) 
	RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11) 
	RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11) 
	>;
	};

	mit48_transform: mit48_transform {
		compatible = "zmk,matrix-transform";
		rows = <4>;
		columns = <12>;

		map = <
	RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11) 
	RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11) 
	RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11) 
	RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4)      RC(3,5)    RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11) 
	>;
	};

	ortho60_transform: ortho60_transform {
		compatible = "zmk,matrix-transform";
		rows = <5>;
		columns = <12>;

		map = <
	RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11) 
	RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11) 
	RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11) 
	RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11) 
	RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11) 
	>;
	};

	mit60_transform: mit60_transform {
		compatible = "zmk,matrix-transform";
		rows = <5>;
		columns = <12>;

		map = <
	RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11) 
	RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11) 
	RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11) 
	RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11) 
	RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4)     RC(4,5)     RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11) 
	>;
	};


	kscan: kscan {
		compatible = "zmk,kscan-gpio-matrix";
		label = "KSCAN";
		debounce-press-ms = <1>;
		debounce-release-ms = <5>;

		diode-direction = "col2row";

		col-gpios
			= <&gpio0 0  (GPIO_ACTIVE_HIGH)>
			, <&gpio0 1  (GPIO_ACTIVE_HIGH)>
			, <&gpio0 2  (GPIO_ACTIVE_HIGH)>
			, <&gpio0 3  (GPIO_ACTIVE_HIGH)>
			, <&gpio0 4  (GPIO_ACTIVE_HIGH)>
			, <&gpio0 5  (GPIO_ACTIVE_HIGH)>
			, <&gpio0 6  (GPIO_ACTIVE_HIGH)>
			, <&gpio0 7  (GPIO_ACTIVE_HIGH)>
			, <&gpio0 8  (GPIO_ACTIVE_HIGH)>
			, <&gpio0 9  (GPIO_ACTIVE_HIGH)>
			, <&gpio0 10 (GPIO_ACTIVE_HIGH)>
			, <&gpio0 11 (GPIO_ACTIVE_HIGH)>
			;
		row-gpios
			= <&gpio0 12 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 13 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 16 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 17 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			, <&gpio0 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
			;
	};
};

&flash0 {
    reg = <0x10000000 DT_SIZE_M(16)>;

    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        /* Reserved memory for the second stage bootloader */
        second_stage_bootloader: partition@0 {
            label = "second_stage_bootloader";
            reg = <0x00000000 0x100>;
            read-only;
        };

        /*
         * Usable flash. Starts at 0x100, after the bootloader. The partition
         * size is 16MB minus the 0x100 bytes taken by the bootloader.
         */
        code_partition: partition@100 {
            label = "code";
            reg = <0x100 (DT_SIZE_M(16) - 0x100)>;
            read-only;
        };
    };
};


&usbd {
  status = "okay";
  cdc_acm_uart: cdc_acm_uart {
    compatible = "zephyr,cdc-acm-uart";
  };
};


&gpio0 {
    status = "okay";
};

