/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&sk {
    quick-release;
};

/ {
    chosen {
        zmk,matrix_transform = &ortho48_transform;
    };

    behaviors {
        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47>;
        };

        hshft: hshft {
            compatible = "zmk,behavior-hold-tap";
            label = "HSHFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47>;
        };

        hmolyr: hmolyr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMOLYR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47>;
        };

        hrmlwin: hrmlwin {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMLWIN";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <325>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47>;
        };

        com_per: com_per {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_PER";
            bindings = <&kp COMMA>, <&kp PERIOD>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47>;
        };
    };

    combos {
        compatible = "zmk,combos";

        bspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <22 21>;
            timeout-ms = <30>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <44 45 38 39>;
            timeout-ms = <30>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <12 13>;
            timeout-ms = <30>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <24 25>;
            timeout-ms = <30>;
        };

        lshift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <27 28>;
            timeout-ms = <30>;
        };

        rshift {
            bindings = <&sk RIGHT_SHIFT>;
            key-positions = <31 32>;
            timeout-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&trans  &trans  &trans  &trans  &trans     &bootloader  &trans  &trans  &trans  &trans  &trans     &trans
&kp Y   &kp C   &kp L   &kp M   &kp K      &trans       &trans  &kp Z   &kp F   &kp U   &kp COMMA  &kp SQT
&kp I   &kp S   &kp R   &kp T   &kp G      &trans       &trans  &kp P   &kp N   &kp E   &kp A      &kp O
&kp Q   &kp V   &kp W   &kp D   &kp SPACE  &trans       &trans  &kp B   &kp H   &kp J   &kp DOT    &kp X
            >;
        };
    };
};
